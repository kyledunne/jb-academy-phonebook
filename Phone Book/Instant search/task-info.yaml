type: edu
custom_name: stage4
files:
- name: test/PhoneBookTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;
    import phonebook.MainKt;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class PhoneBookTest extends BaseStageTest {
        public PhoneBookTest() {
            super(MainKt.class);
        }

        private long timeOnTestStart;

        @Override
        public List<TestCase> generate() {
            timeOnTestStart = System.currentTimeMillis();
            return Arrays.asList(
                    new TestCase().setTimeLimit(30 * 60 * 1000)
            );
        }


        private CheckResult checkPhrases(String reply, String... phrases) {
            reply = reply.toLowerCase();
            for (String phrase : phrases) {
                if (!reply.contains(phrase.toLowerCase())) {
                    return CheckResult.FALSE("Not found the part `" + phrase + "` in your output.");
                }
            }
            return CheckResult.TRUE;
        }

        private List<String> findAll(String reply, String regex) {
            Matcher matcher = Pattern.compile(regex).matcher(reply);
            List<String> groups = new ArrayList<>();
            while (matcher.find()) {
                groups.add(matcher.group());
            }
            return groups;
        }

        private String timeRegex = "(\\d+)\\s*min.*?(\\d+)\\s*sec.*?(\\d+)\\s*ms";
        private Pattern timeRegexPattern = Pattern.compile(timeRegex);

        private long parseTimestamp(String timestamp) {
            Matcher matcher = timeRegexPattern.matcher(timestamp);
            if (!matcher.matches() || matcher.groupCount() < 3) {
                throw new IllegalStateException("???Not matches the line " + timestamp);
            }
            int min = Integer.parseInt(matcher.group(1));
            int sec = Integer.parseInt(matcher.group(2));
            int ms = Integer.parseInt(matcher.group(3));
            return ms + sec * 1000 + min * 1000 * 60;
        }


        @Override
        public CheckResult check(String reply, Object clue) {
            long realTime = System.currentTimeMillis() - timeOnTestStart;
            reply = reply.toLowerCase();
            CheckResult res = checkPhrases(reply,
                    "found",
                    "min.",
                    "sec.",
                    "ms.",
                    "sorting time",
                    "searching time",
                    "linear search",
                    "bubble sort",
                    "jump search",
                    "quick sort",
                    "binary search",
                    "hash table",
                    "creating time"
            );
            if (!res.isCorrect()) {
                return res;
            }

            List<String> stat1 = findAll(reply, "500 / 500");
            List<String> stat2 = findAll(reply, "500/500");

            if (stat1.size() + stat2.size() < 4) {
                return CheckResult.FALSE("Your output should contain 4 times the phrase `500 / 500`");
            }

            List<String> timestamps = findAll(reply, timeRegex);
            if (timestamps.size() != 10) {
                return CheckResult.FALSE("Your output should contain 10 timer outputs, but found "
                        + timestamps.size());
            }
            // should not fail..
            long t1 = parseTimestamp(timestamps.get(0));
            long t2 = parseTimestamp(timestamps.get(1));
            long t3 = parseTimestamp(timestamps.get(2));
            long t4 = parseTimestamp(timestamps.get(3));
            // qsort
            long t5 = parseTimestamp(timestamps.get(4));
            long t6 = parseTimestamp(timestamps.get(5));
            long t7 = parseTimestamp(timestamps.get(6));
            // hash table
            long t8 = parseTimestamp(timestamps.get(7));
            long t9 = parseTimestamp(timestamps.get(8));
            long t10 = parseTimestamp(timestamps.get(9));

            if (Math.abs(t3 + t4 - t2) > 100) {
                return CheckResult.FALSE("Your third and fourth timer outputs in total (bubble sorting and searching) " +
                        "should be equal to the second (total search time).");
            }
            if (Math.abs(t6 + t7 - t5) > 100) {
                return CheckResult.FALSE("Your 6-th and 7-th timer outputs in total (qsort and searching) " +
                        "should be equal to the 5-th (total search time).");
            }
            if (Math.abs(t9 + t10 - t8) > 100) {
                return CheckResult.FALSE("Your 9-th and 10-th timer outputs in total (creating hashtable and searching) " +
                        "should be equal to the 8-th (total search time).");
            }

            long estimatedTime = t1 + t2 + t5 + t8;
            if (realTime < 1000) {
                return CheckResult.FALSE("Your program completes too fast. Faster than a second!");
            }

            if (Math.abs(estimatedTime - realTime) > estimatedTime * 0.3) {
                return CheckResult.FALSE("Your estimated time is not similar to real time the program works. " +
                        "Real time: " + realTime + "ms, estimated time: " + estimatedTime + "ms");
            }

            if (t8 >= t5) {
                return CheckResult.FALSE("Your hashtable works slower, than quick sort + binary search.");
            }
            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: src/phonebook/stage1.kt
  visible: true
  text: |
    //@file:Suppress("MemberVisibilityCanBePrivate")
    //
    package phonebook
    //
    //import java.io.File
    //import java.nio.file.Files
    //
    //fun main() {
    //    val directoryLines = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/directory.txt").toPath())
    //    val directory = Array(directoryLines.size) {
    //        PhoneBookEntry(directoryLines[it].split(' ', limit = 2))
    //    }
    //    val names = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/find.txt").toPath())
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //    println("Start searching...")
    //    val startTime = System.currentTimeMillis()
    //    for ((index, person) in names.withIndex()) {
    //        inner@for (entry in directory) {
    //            if (person == entry.name) {
    //                numbers[index] = entry.number
    //                foundNames++
    //                break@inner
    //            }
    //        }
    //    }
    //    val endTime = System.currentTimeMillis()
    //    val duration = MinsSecsMillis(endTime - startTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $duration")
    //}
    //
    //class PhoneBookEntry(numberAndName: List<String>) {
    //    val number = numberAndName[0]
    //    val name = numberAndName[1]
    //}
    //
    //class MinsSecsMillis(durationInMillis: Long) {
    //    val mins: Long
    //    val secs: Long
    //    val millis: Long
    //    init {
    //        var input = durationInMillis
    //        mins = input / 60000
    //        input -= (mins * 60000)
    //        secs = input / 1000
    //        input -= (secs * 1000)
    //        millis = input
    //    }
    //
    //    override fun toString() = "$mins min. $secs sec. $millis ms."
    //}
  learner_created: true
- name: src/phonebook/stage2.kt
  visible: true
  text: |
    //@file:Suppress("MemberVisibilityCanBePrivate", "DuplicatedCode")
    //
    package phonebook
    //
    //import java.io.File
    //import java.nio.file.Files
    //import kotlin.math.roundToInt
    //import kotlin.math.sqrt
    //
    //fun main() {
    //    val directoryLines = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/directory.txt").toPath())
    //    val directory = Array(directoryLines.size) {
    //        PhoneBookEntry(directoryLines[it].split(' ', limit = 2))
    //    }
    //    val names = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/find.txt").toPath())
    //
    //    val millis = linearSearch(directory, names)
    //
    //    bubbleSortJumpSearch(directory, names, millis * 10)
    //}
    //
    //fun linearSearch(directory: Array<PhoneBookEntry>, names: List<String>): Long {
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    val startTime = System.currentTimeMillis()
    //    for ((index, person) in names.withIndex()) {
    //        inner@for (entry in directory) {
    //            if (person == entry.name) {
    //                numbers[index] = entry.number
    //                foundNames++
    //                break@inner
    //            }
    //        }
    //    }
    //    val endTime = System.currentTimeMillis()
    //    val duration = MinsSecsMillis(endTime - startTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $duration")
    //    return endTime - startTime
    //}
    //
    //fun bubbleSortJumpSearch(directory: Array<PhoneBookEntry>, names: List<String>, maxSortTime: Long) {
    //    val directorySize = directory.size
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    println("Start searching (bubble sort + jump search)...")
    //    val sortStartTime = System.currentTimeMillis()
    //    var unSortedElements = directorySize
    //    var temp: PhoneBookEntry
    //    while (unSortedElements > 1) {
    //        for (i in 0 until unSortedElements - 1) {
    //            if (directory[i] > directory[i + 1]) {
    //                temp = directory[i + 1]
    //                directory[i + 1] = directory[i]
    //                directory[i] = temp
    //            }
    //        }
    //        unSortedElements--
    //        if (System.currentTimeMillis() - sortStartTime > maxSortTime) {
    //            breakBubbleSortToLinearSearch(directory, names, sortStartTime)
    //            return
    //        }
    //    }
    //    val sortEndTime = System.currentTimeMillis()
    //
    //    val searchStartTime = System.currentTimeMillis()
    //    val sqrt = sqrt(directorySize.toDouble()).roundToInt()
    //    var currentBlockStart: Int
    //    var currentBlockEnd: Int
    //    for ((index, person) in names.withIndex()) {
    //        currentBlockStart = 0
    //        currentBlockEnd = sqrt
    //
    //        inner@while (currentBlockStart < directorySize) {
    //            if (currentBlockEnd > directorySize) {
    //                currentBlockEnd = directorySize
    //            }
    //            // returns positive if the name is greater than the directory name
    //            if (person <= directory[currentBlockEnd - 1].name) {
    //                for (innerBlockIndex in currentBlockEnd - 1 downTo currentBlockStart) {
    //                    if (person == directory[innerBlockIndex].name) {
    //                        foundNames++
    //                        numbers[index] = directory[innerBlockIndex].number
    //                        break@inner
    //                    }
    //                    throw Exception("Should be unreachable code; name should have been found in above for loop")
    //                }
    //            } else {
    //                currentBlockStart += sqrt
    //                currentBlockEnd += sqrt
    //            }
    //        }
    //    }
    //    val searchEndTime = System.currentTimeMillis()
    //    val sortDuration = MinsSecsMillis(sortEndTime - sortStartTime)
    //    val searchDuration = MinsSecsMillis(searchEndTime - searchStartTime)
    //    val totalDuration = MinsSecsMillis(searchEndTime - sortStartTime)
    //    println("Found $foundNames out of $totalNames entries. Time taken: $totalDuration")
    //    println("Sorting time: $sortDuration")
    //    println("Searching time: $searchDuration")
    //}
    //
    //fun breakBubbleSortToLinearSearch(directory: Array<PhoneBookEntry>, names: List<String>, sortStartTime: Long) {
    //    val sortEndTime = System.currentTimeMillis()
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    println("Start searching (linear search)...")
    //    val searchStartTime = System.currentTimeMillis()
    //    for ((index, person) in names.withIndex()) {
    //        inner@for (entry in directory) {
    //            if (person == entry.name) {
    //                numbers[index] = entry.number
    //                foundNames++
    //                break@inner
    //            }
    //        }
    //    }
    //    val searchEndTime = System.currentTimeMillis()
    //    val sortDuration = MinsSecsMillis(sortEndTime - sortStartTime)
    //    val searchDuration = MinsSecsMillis(searchEndTime - searchStartTime)
    //    val totalDuration = MinsSecsMillis(searchEndTime - sortStartTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $totalDuration")
    //    println("Sorting time: $sortDuration - STOPPED, moved to linear search")
    //    println("Searching time: $searchDuration")
    //}
    //
    //class PhoneBookEntry(numberAndName: List<String>): Comparable<PhoneBookEntry> {
    //    val number = numberAndName[0]
    //    val name = numberAndName[1]
    //
    //    /**
    //     * Compares this object with the specified object for order. Returns zero if this object is equal
    //     * to the specified [other] object, a negative number if it's less than [other], or a positive number
    //     * if it's greater than [other].
    //     */
    //    override fun compareTo(other: PhoneBookEntry): Int {
    //        return name.compareTo(other.name)
    //    }
    //}
    //
    //class MinsSecsMillis(durationInMillis: Long) {
    //    val mins: Long
    //    val secs: Long
    //    val millis: Long
    //    init {
    //        var input = durationInMillis
    //        mins = input / 60000
    //        input -= (mins * 60000)
    //        secs = input / 1000
    //        input -= (secs * 1000)
    //        millis = input
    //    }
    //
    //    override fun toString() = "$mins min. $secs sec. $millis ms."
    //}
  learner_created: true
- name: src/phonebook/stage3.kt
  visible: true
  text: |
    //@file:Suppress("MemberVisibilityCanBePrivate", "DuplicatedCode")
    //
    package phonebook
    //
    //import java.io.File
    //import java.nio.file.Files
    //import kotlin.math.roundToInt
    //import kotlin.math.sqrt
    //
    //fun main() {
    //    val directoryLines = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/directory.txt").toPath())
    //    val directory = Array(directoryLines.size) {
    //        PhoneBookEntry(directoryLines[it].split(' ', limit = 2))
    //    }
    //    val names = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/find.txt").toPath())
    //
    //    val millis = linearSearch(directory, names)
    //
    //    bubbleSortJumpSearch(directory.clone(), names, millis * 10)
    //
    //    quickSortBinarySearch(directory, names)
    //}
    //
    //fun linearSearch(directory: Array<PhoneBookEntry>, names: List<String>): Long {
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    println("Start searching (linear search)...")
    //    val startTime = System.currentTimeMillis()
    //    for ((index, person) in names.withIndex()) {
    //        inner@for (entry in directory) {
    //            if (person == entry.name) {
    //                numbers[index] = entry.number
    //                foundNames++
    //                break@inner
    //            }
    //        }
    //    }
    //    val endTime = System.currentTimeMillis()
    //    val duration = MinsSecsMillis(endTime - startTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $duration")
    //    return endTime - startTime
    //}
    //
    //fun bubbleSortJumpSearch(directory: Array<PhoneBookEntry>, names: List<String>, maxSortTime: Long) {
    //    val directorySize = directory.size
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    println("Start searching (bubble sort + jump search)...")
    //    val sortStartTime = System.currentTimeMillis()
    //    var unSortedElements = directorySize
    //    var temp: PhoneBookEntry
    //    while (unSortedElements > 1) {
    //        for (i in 0 until unSortedElements - 1) {
    //            if (directory[i] > directory[i + 1]) {
    //                temp = directory[i + 1]
    //                directory[i + 1] = directory[i]
    //                directory[i] = temp
    //            }
    //        }
    //        unSortedElements--
    //        if (System.currentTimeMillis() - sortStartTime > maxSortTime) {
    //            breakBubbleSortToLinearSearch(directory, names, sortStartTime)
    //            return
    //        }
    //    }
    //    val sortEndTime = System.currentTimeMillis()
    //
    //    val searchStartTime = System.currentTimeMillis()
    //    val sqrt = sqrt(directorySize.toDouble()).roundToInt()
    //    var currentBlockStart: Int
    //    var currentBlockEnd: Int
    //    for ((index, person) in names.withIndex()) {
    //        currentBlockStart = 0
    //        currentBlockEnd = sqrt
    //
    //        inner@while (currentBlockStart < directorySize) {
    //            if (currentBlockEnd > directorySize) {
    //                currentBlockEnd = directorySize
    //            }
    //            // returns positive if the name is greater than the directory name
    //            if (person <= directory[currentBlockEnd - 1].name) {
    //                for (innerBlockIndex in currentBlockEnd - 1 downTo currentBlockStart) {
    //                    if (person == directory[innerBlockIndex].name) {
    //                        foundNames++
    //                        numbers[index] = directory[innerBlockIndex].number
    //                        break@inner
    //                    }
    //                    throw Exception("Should be unreachable code; name should have been found in above for loop")
    //                }
    //            } else {
    //                currentBlockStart += sqrt
    //                currentBlockEnd += sqrt
    //            }
    //        }
    //    }
    //    val searchEndTime = System.currentTimeMillis()
    //    val sortDuration = MinsSecsMillis(sortEndTime - sortStartTime)
    //    val searchDuration = MinsSecsMillis(searchEndTime - searchStartTime)
    //    val totalDuration = MinsSecsMillis(searchEndTime - sortStartTime)
    //    println("Found $foundNames out of $totalNames entries. Time taken: $totalDuration")
    //    println("Sorting time: $sortDuration")
    //    println("Searching time: $searchDuration")
    //}
    //
    //fun breakBubbleSortToLinearSearch(directory: Array<PhoneBookEntry>, names: List<String>, sortStartTime: Long) {
    //    val sortEndTime = System.currentTimeMillis()
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    println("Start searching (linear search)...")
    //    val searchStartTime = System.currentTimeMillis()
    //    for ((index, person) in names.withIndex()) {
    //        inner@for (entry in directory) {
    //            if (person == entry.name) {
    //                numbers[index] = entry.number
    //                foundNames++
    //                break@inner
    //            }
    //        }
    //    }
    //    val searchEndTime = System.currentTimeMillis()
    //    val sortDuration = MinsSecsMillis(sortEndTime - sortStartTime)
    //    val searchDuration = MinsSecsMillis(searchEndTime - searchStartTime)
    //    val totalDuration = MinsSecsMillis(searchEndTime - sortStartTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $totalDuration")
    //    println("Sorting time: $sortDuration - STOPPED, moved to linear search")
    //    println("Searching time: $searchDuration")
    //}
    //
    //fun quickSortBinarySearch(directory: Array<PhoneBookEntry>, names: List<String>) {
    //    val directorySize = directory.size
    //    val totalNames = names.size
    //    val numbers = Array<String?>(totalNames) { "" }
    //    var foundNames = 0
    //    println("Start searching (quick sort + binary search)...")
    //    val sortStartTime = System.currentTimeMillis()
    //
    //    val sortedDirectory = quicksort(directory.toList())
    //
    //    val sortEndTime = System.currentTimeMillis()
    //    val searchStartTime = System.currentTimeMillis()
    //
    //    for ((index, person) in names.withIndex()) {
    //        numbers[index] = binarySearch(sortedDirectory, person)
    //        if (numbers[index] != null) foundNames++
    //    }
    //
    //    val searchEndTime = System.currentTimeMillis()
    //    val sortDuration = MinsSecsMillis(sortEndTime - sortStartTime)
    //    val searchDuration = MinsSecsMillis(searchEndTime - searchStartTime)
    //    val totalDuration = MinsSecsMillis(searchEndTime - sortStartTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $totalDuration")
    //    println("Sorting time: $sortDuration")
    //    println("Searching time: $searchDuration")
    //}
    // // Timing note: quicksort seemed to be between 2-10% faster than genericQuicksort
    //fun <T: Comparable<T>> genericQuicksort(array: List<T>): List<T> {
    //    if (array.size in 0..1) return array
    //    val pivot = array[array.size - 1]
    //    val lessThan = mutableListOf<T>()
    //    val greaterThan = mutableListOf<T>()
    //    for (element in 0..array.size - 2) {
    //        if (array[element] < pivot) {
    //            lessThan.add(array[element])
    //        } else {
    //            greaterThan.add(array[element])
    //        }
    //    }
    //    return genericQuicksort(lessThan) + pivot + genericQuicksort(greaterThan)
    //}
    //
    //fun quicksort(list: List<PhoneBookEntry>): List<PhoneBookEntry> {
    //    if (list.size in 0..1) return list
    //    val pivot = list[list.size - 1]
    //    val lessThan = mutableListOf<PhoneBookEntry>()
    //    val greaterThan = mutableListOf<PhoneBookEntry>()
    //    var value: PhoneBookEntry
    //    for (index in 0 until list.size - 1) {
    //        value = list[index]
    //        if (value < pivot) {
    //            lessThan.add(value)
    //        } else {
    //            greaterThan.add(value)
    //        }
    //    }
    //    return quicksort(lessThan) + pivot + quicksort(greaterThan)
    //}
    //
    ///**
    // * @return phone number
    // */
    //fun binarySearch(array: List<PhoneBookEntry>, name: String): String? {
    //    if (array.isEmpty()) return null
    //    if (array.size == 1) {
    //        if (array[0].name == name) return array[0].number
    //        return null
    //    }
    //    val midElement = array.size / 2
    //    val comparison = name.compareTo(array[midElement].name)
    //    if (comparison == 0) return array[midElement].number
    //    if (comparison < 0) {
    //        return binarySearch(array.subList(0, midElement), name)
    //    }
    //    return binarySearch(array.subList(midElement + 1, array.size), name)
    //}
    //
    //class PhoneBookEntry(numberAndName: List<String>): Comparable<PhoneBookEntry> {
    //    val number = numberAndName[0]
    //    val name = numberAndName[1]
    //
    //    /**
    //     * Compares this object with the specified object for order. Returns zero if this object is equal
    //     * to the specified [other] object, a negative number if it's less than [other], or a positive number
    //     * if it's greater than [other].
    //     */
    //    override fun compareTo(other: PhoneBookEntry): Int {
    //        return name.compareTo(other.name)
    //    }
    //}
    //
    //class MinsSecsMillis(durationInMillis: Long) {
    //    val mins: Long
    //    val secs: Long
    //    val millis: Long
    //    init {
    //        var input = durationInMillis
    //        mins = input / 60000
    //        input -= (mins * 60000)
    //        secs = input / 1000
    //        input -= (secs * 1000)
    //        millis = input
    //    }
    //
    //    override fun toString() = "$mins min. $secs sec. $millis ms."
    //}
  learner_created: true
- name: src/phonebook/results.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/479/implement
status: Solved
record: -1
