type: edu
custom_name: stage3
files:
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.v6.stage.BaseStageTest;\nimport org.hyperskill.hstest.v6.testcase.CheckResult;\n\
    import org.hyperskill.hstest.v6.testcase.TestCase;\nimport phonebook.MainKt;\n\
    \nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ PhoneBookTest extends BaseStageTest {\n    public PhoneBookTest() {\n      \
    \  super(MainKt.class);\n    }\n    \n    private long timeOnTestStart;\n    \n\
    \    @Override\n    public List<TestCase> generate() {\n        timeOnTestStart\
    \ = System.currentTimeMillis();\n        return Arrays.asList(\n             \
    \   new TestCase().setTimeLimit(30 * 60 * 1000)\n        );\n    }\n    \n   \
    \ private CheckResult checkPhrases(String reply, String... phrases) {\n      \
    \  reply = reply.toLowerCase();\n        for (String phrase : phrases) {\n   \
    \         if (!reply.contains(phrase.toLowerCase())) {\n                return\
    \ CheckResult.FALSE(\"Not found the part `\" + phrase + \"` in your output.\"\
    );\n            }\n        }\n        return CheckResult.TRUE;\n    }\n    \n\
    \    private List<String> findAll(String reply, String regex) {\n        Matcher\
    \ matcher = Pattern.compile(regex).matcher(reply);\n        List<String> groups\
    \ = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.FALSE(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.FALSE(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.FALSE(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.FALSE(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.FALSE(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.FALSE(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.TRUE;\n    }\n}\n"
  learner_created: false
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: src/phonebook/stage1.kt
  visible: true
  text: |
    //@file:Suppress("MemberVisibilityCanBePrivate")
    //
    package phonebook
    //
    //import java.io.File
    //import java.nio.file.Files
    //
    //fun main() {
    //    val directoryLines = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/directory.txt").toPath())
    //    val directory = Array(directoryLines.size) {
    //        PhoneBookEntry(directoryLines[it].split(' ', limit = 2))
    //    }
    //    val names = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/find.txt").toPath())
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //    println("Start searching...")
    //    val startTime = System.currentTimeMillis()
    //    for ((index, person) in names.withIndex()) {
    //        inner@for (entry in directory) {
    //            if (person == entry.name) {
    //                numbers[index] = entry.number
    //                foundNames++
    //                break@inner
    //            }
    //        }
    //    }
    //    val endTime = System.currentTimeMillis()
    //    val duration = MinsSecsMillis(endTime - startTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $duration")
    //}
    //
    //class PhoneBookEntry(numberAndName: List<String>) {
    //    val number = numberAndName[0]
    //    val name = numberAndName[1]
    //}
    //
    //class MinsSecsMillis(durationInMillis: Long) {
    //    val mins: Long
    //    val secs: Long
    //    val millis: Long
    //    init {
    //        var input = durationInMillis
    //        mins = input / 60000
    //        input -= (mins * 60000)
    //        secs = input / 1000
    //        input -= (secs * 1000)
    //        millis = input
    //    }
    //
    //    override fun toString() = "$mins min. $secs sec. $millis ms."
    //}
  learner_created: true
- name: src/phonebook/stage2.kt
  visible: true
  text: |
    //@file:Suppress("MemberVisibilityCanBePrivate", "DuplicatedCode")
    //
    package phonebook
    //
    //import java.io.File
    //import java.nio.file.Files
    //import kotlin.math.roundToInt
    //import kotlin.math.sqrt
    //
    //fun main() {
    //    val directoryLines = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/directory.txt").toPath())
    //    val directory = Array(directoryLines.size) {
    //        PhoneBookEntry(directoryLines[it].split(' ', limit = 2))
    //    }
    //    val names = Files.readAllLines(File("D:/code/kotlin/phoneBookResources/find.txt").toPath())
    //
    //    val millis = linearSearch(directory, names)
    //
    //    bubbleSortJumpSearch(directory, names, millis * 10)
    //}
    //
    //fun linearSearch(directory: Array<PhoneBookEntry>, names: List<String>): Long {
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    val startTime = System.currentTimeMillis()
    //    for ((index, person) in names.withIndex()) {
    //        inner@for (entry in directory) {
    //            if (person == entry.name) {
    //                numbers[index] = entry.number
    //                foundNames++
    //                break@inner
    //            }
    //        }
    //    }
    //    val endTime = System.currentTimeMillis()
    //    val duration = MinsSecsMillis(endTime - startTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $duration")
    //    return endTime - startTime
    //}
    //
    //fun bubbleSortJumpSearch(directory: Array<PhoneBookEntry>, names: List<String>, maxSortTime: Long) {
    //    val directorySize = directory.size
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    println("Start searching (bubble sort + jump search)...")
    //    val sortStartTime = System.currentTimeMillis()
    //    var unSortedElements = directorySize
    //    var temp: PhoneBookEntry
    //    while (unSortedElements > 1) {
    //        for (i in 0 until unSortedElements - 1) {
    //            if (directory[i] > directory[i + 1]) {
    //                temp = directory[i + 1]
    //                directory[i + 1] = directory[i]
    //                directory[i] = temp
    //            }
    //        }
    //        unSortedElements--
    //        if (System.currentTimeMillis() - sortStartTime > maxSortTime) {
    //            breakBubbleSortToLinearSearch(directory, names, sortStartTime)
    //            return
    //        }
    //    }
    //    val sortEndTime = System.currentTimeMillis()
    //
    //    val searchStartTime = System.currentTimeMillis()
    //    val sqrt = sqrt(directorySize.toDouble()).roundToInt()
    //    var currentBlockStart: Int
    //    var currentBlockEnd: Int
    //    for ((index, person) in names.withIndex()) {
    //        currentBlockStart = 0
    //        currentBlockEnd = sqrt
    //
    //        inner@while (currentBlockStart < directorySize) {
    //            if (currentBlockEnd > directorySize) {
    //                currentBlockEnd = directorySize
    //            }
    //            // returns positive if the name is greater than the directory name
    //            if (person <= directory[currentBlockEnd - 1].name) {
    //                for (innerBlockIndex in currentBlockEnd - 1 downTo currentBlockStart) {
    //                    if (person == directory[innerBlockIndex].name) {
    //                        foundNames++
    //                        numbers[index] = directory[innerBlockIndex].number
    //                        break@inner
    //                    }
    //                    throw Exception("Should be unreachable code; name should have been found in above for loop")
    //                }
    //            } else {
    //                currentBlockStart += sqrt
    //                currentBlockEnd += sqrt
    //            }
    //        }
    //    }
    //    val searchEndTime = System.currentTimeMillis()
    //    val sortDuration = MinsSecsMillis(sortEndTime - sortStartTime)
    //    val searchDuration = MinsSecsMillis(searchEndTime - searchStartTime)
    //    val totalDuration = MinsSecsMillis(searchEndTime - sortStartTime)
    //    println("Found $foundNames out of $totalNames entries. Time taken: $totalDuration")
    //    println("Sorting time: $sortDuration")
    //    println("Searching time: $searchDuration")
    //}
    //
    //fun breakBubbleSortToLinearSearch(directory: Array<PhoneBookEntry>, names: List<String>, sortStartTime: Long) {
    //    val sortEndTime = System.currentTimeMillis()
    //    val totalNames = names.size
    //    val numbers = Array(totalNames) { "" }
    //    var foundNames = 0
    //
    //    println("Start searching (linear search)...")
    //    val searchStartTime = System.currentTimeMillis()
    //    for ((index, person) in names.withIndex()) {
    //        inner@for (entry in directory) {
    //            if (person == entry.name) {
    //                numbers[index] = entry.number
    //                foundNames++
    //                break@inner
    //            }
    //        }
    //    }
    //    val searchEndTime = System.currentTimeMillis()
    //    val sortDuration = MinsSecsMillis(sortEndTime - sortStartTime)
    //    val searchDuration = MinsSecsMillis(searchEndTime - searchStartTime)
    //    val totalDuration = MinsSecsMillis(searchEndTime - sortStartTime)
    //    println("Found $foundNames / $totalNames entries. Time taken: $totalDuration")
    //    println("Sorting time: $sortDuration - STOPPED, moved to linear search")
    //    println("Searching time: $searchDuration")
    //}
    //
    //class PhoneBookEntry(numberAndName: List<String>): Comparable<PhoneBookEntry> {
    //    val number = numberAndName[0]
    //    val name = numberAndName[1]
    //
    //    /**
    //     * Compares this object with the specified object for order. Returns zero if this object is equal
    //     * to the specified [other] object, a negative number if it's less than [other], or a positive number
    //     * if it's greater than [other].
    //     */
    //    override fun compareTo(other: PhoneBookEntry): Int {
    //        return name.compareTo(other.name)
    //    }
    //}
    //
    //class MinsSecsMillis(durationInMillis: Long) {
    //    val mins: Long
    //    val secs: Long
    //    val millis: Long
    //    init {
    //        var input = durationInMillis
    //        mins = input / 60000
    //        input -= (mins * 60000)
    //        secs = input / 1000
    //        input -= (secs * 1000)
    //        millis = input
    //    }
    //
    //    override fun toString() = "$mins min. $secs sec. $millis ms."
    //}
  learner_created: true
- name: src/phonebook/stage3.kt
  visible: true
  text: |+
    package phonebook

  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/478/implement
status: Solved
record: 3
